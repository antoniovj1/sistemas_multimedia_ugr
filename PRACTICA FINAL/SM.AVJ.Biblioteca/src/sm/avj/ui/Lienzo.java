/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.avj.ui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import sm.avj.graficos.CurvaQ2D;
import sm.avj.graficos.Forma;
import sm.avj.graficos.Rectangulo2D;
import sm.avj.graficos.MiShape;
import sm.avj.graficos.Poligono2D;

/**
 *
 * @author antoniovj1
 */
public class Lienzo extends javax.swing.JPanel {

    final float DASH_EDITAR[] = {3.0f, 3.0f};
    final float WIDTH_EDITAR = 2.0f;

    private Forma forma;
    private MiShape sh;
    MiShape clip;
    Rectangulo2D boundigBox;
    private final List<MiShape> vShape;
    private Point2D puntoClick, puntoActual;
    private boolean editar;
    private boolean poligono_empezado;
    private boolean curvaq_empezada, curvaq_ptc;

    public Lienzo() {
        this.poligono_empezado = false;
        this.curvaq_empezada = false;
        this.curvaq_ptc = false;
        this.vShape = new ArrayList<>();
        this.forma = Forma.PUNTO;

        boundigBox = new Rectangulo2D();
        boundigBox.setColorFrente(Color.GRAY);
        boundigBox.setTransparencia(true);
        boundigBox.setStrokeWidth(WIDTH_EDITAR);
        boundigBox.setStrokeDash(DASH_EDITAR);

        initComponents();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;

        if (clip != null) {
            clip.paint(g2d);
        }

        for (MiShape s : vShape) {
            s.paint(g2d);
        }

        if (boundigBox != null && editar) {
            boundigBox.paint(g2d);
        }

    }

    private MiShape createShape(Point2D p1) throws ClassNotFoundException, NoSuchMethodException,
            IllegalArgumentException, InvocationTargetException,
            InstantiationException, IllegalAccessException {

        Class c = Class.forName(forma.getNombreClase());
        Constructor constructor = c.getConstructor(new Class[]{Point2D.class});

        MiShape s = (MiShape) constructor.newInstance(p1);

        return s;
    }

    private MiShape getSelectedSape(Point2D p) {
        int i = vShape.size() - 1;

        while (i >= 0) {
            if ((vShape.get(i)).contains(p)) {
                return vShape.get(i);
            }
            i--;
        }
        return null;
    }

    private void moveFront(MiShape sh) {
        vShape.remove(sh);
        vShape.add(vShape.size(), sh);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(java.awt.Color.white);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (curvaq_empezada == false) {
            puntoClick = evt.getPoint();
        }
        puntoActual = puntoClick;

        //Por si el usuario cambia de forma sin terminarla
        //Me aseguro de que los booleanos de poligono y curva no interfieren
        if (forma != Forma.POLIGONO) {
            poligono_empezado = false;
        }
        if (forma != Forma.CURVAQ) {
            curvaq_empezada = curvaq_ptc = false;
        }

        if (!poligono_empezado && !curvaq_empezada) {
            sh = null;
        }

        if (editar) {
            sh = this.getSelectedSape(puntoClick);

            if (sh != null) {
                boundigBox.setRectangulo(sh.getBounds());
            }

        } else if (!poligono_empezado && !curvaq_empezada) {
            try {
                sh = createShape(puntoClick);
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | NoSuchMethodException | IllegalArgumentException | InvocationTargetException ex) {
                Logger.getLogger(Lienzo.class.getName()).log(Level.SEVERE, null, ex);
            }
            vShape.add(sh);

            if (forma == Forma.POLIGONO) {
                poligono_empezado = true;
            } else if (forma == Forma.CURVAQ) {
                curvaq_empezada = true;
            }
        }
        repaint();

    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        puntoActual = evt.getPoint();

        if (sh != null) {
            if (editar) {
                //En primer lugar calculo cuanto y hacia donde se ha movido el punto
                // respecto a donde si hizo click.
                Point2D p = new Point2D.Double(puntoActual.getX() - puntoClick.getX(), puntoActual.getY() - puntoClick.getY());

                sh.setLocation(p);
                boundigBox.setRectangulo(sh.getBounds());

                puntoClick = puntoActual;

            } else if (!curvaq_ptc) {
                sh.updateShape(puntoClick, puntoActual);
            } else if (forma == Forma.CURVAQ && curvaq_empezada && curvaq_ptc) {
                ((CurvaQ2D) sh).setPointCtrl(puntoActual);
            }
        }
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getClickCount() == 2) {
            poligono_empezado = false;
            if (curvaq_empezada && !curvaq_ptc) {
                curvaq_ptc = true;
            } else if (curvaq_empezada && curvaq_ptc) {
                curvaq_empezada = false;
                curvaq_ptc = false;
            }
        } else if (!editar) {
            if (sh instanceof Poligono2D) {
                ((Poligono2D) sh).addPoint(puntoClick);
            } else {
                this.formMouseDragged(evt);
            }
        } else if (evt.getButton() == MouseEvent.BUTTON2 && sh != null) {
            moveFront(sh);
        }
        repaint();
    }//GEN-LAST:event_formMouseClicked

    /* GETTERS y SETTERS */
    public Forma getForma() {
        return forma;
    }

    public void setForma(Forma forma) {
        this.forma = forma;
    }

    public Color getColorFrente() {
        if (sh != null) {
            return sh.getColorFrente();
        } else {
            return null;
        }
    }

    public void setColorFrente(Color color) {
        if (sh != null) {
            sh.setColorFrente(color);
            this.paint(this.getGraphics());
        }
    }

    public Color getColorFondo() {
        if (sh != null) {
            return sh.getColorFondo();
        } else {
            return null;
        }
    }

    public void setColorFondo(Color color) {
        if (sh != null) {
            sh.setColorFondo(color);
            this.paint(this.getGraphics());
        }
    }

    public Stroke getStroke() {
        if (sh != null) {
            return sh.getStroke();
        } else {
            return null;
        }
    }

    public Float getStrokeWidth() {
        if (sh != null) {
            return ((BasicStroke) sh.getStroke()).getLineWidth();
        } else {
            return 1.0f;
        }
    }

    public void setStroke(Stroke stroke) {
        if (sh != null) {
            sh.setStroke(stroke);
        }
    }

    public void setStrokeDash(float[] dash) {
        if (sh != null) {
            sh.setStrokeDash(dash);
        }
    }

    public void setStrokeWidth(float w) {
        if (sh != null) {
            sh.setStrokeWidth(w);
        }
    }

    public boolean isRelleno() {
        if (sh != null) {
            return sh.isRelleno();
        } else {
            return false;
        }
    }

    public void setRelleno(boolean relleno) {
        if (sh != null) {
            sh.setRelleno(relleno);
        }
    }

    public boolean isAlisado() {
        if (sh != null) {
            return sh.isAlisado();
        } else {
            return false;
        }
    }

    public void setAlisado(boolean alisado) {
        if (sh != null) {
            sh.setAlisado(alisado);
        }
    }

    public boolean isTransparencia() {
        if (sh != null) {
            return sh.isTransparencia();
        } else {
            return false;
        }
    }

    public void setTransparencia(boolean transparencia) {
        if (sh != null) {
            sh.setTransparencia(transparencia);
        }
    }

    public void setTrasnsparenciaValue(float val) {
        if (sh != null) {
            sh.setTransparenciaValue(val);
        }
    }

    public float getTransparenciaValue() {
        if (sh != null) {
            return sh.getTransparenciaVlaue();
        } else {
            return 0.5f;
        }
    }

    public boolean isGradiente() {
        if (sh != null) {
            return sh.isGradiente();
        } else {
            return false;
        }
    }

    public void setGradiente(boolean gradiente) {
        if (sh != null) {
            sh.setGradiente(gradiente);
        }
    }

    public void setConfigGradiente(int tipo) {
        if (sh != null) {
            sh.setConfigGradiente(tipo);
        }
    }

    public int getTipoGradiente() {
        if (sh != null) {
            return sh.getTipoGradiente();
        } else {
            return 0;
        }
    }

    public boolean isEditar() {
        return editar;
    }

    public void setEditar(boolean editar) {
        this.editar = editar;
    }

    public MiShape getClip() {
        return clip;
    }

    public void setClip(MiShape clip) {
        this.clip = clip;
    }

    public boolean isFigSelected() {
        return sh != null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
