/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicaFinal;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.avj.imagen.SepiaOp;
import sm.avj.ui.SelectorColoresDialog;
import sm.avj.ui.StrokeCellRenderer;
import sm.avj.ui.resizeDialog;
import sm.image.BlendOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SubtractionOp;

/**
 *
 * @author antonio
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * @TODO Arreglar todo lo relativo a la mezcla de imagenes
     */
    BufferedImage imagenAux = null;
    BufferedImage imagenBendAux1 = null;
    BufferedImage imagenBendAux2 = null;
    //float alfa_bend = 0.5f;
    // VentanaInterna bending = null;
    VentanaBlending vb = null;

    final float dash1[] = {10.0f};
    final float dash2[] = {20.0f, 9.0f, 3.0f, 9.0f};
    final float dash3[] = {3.0f};
    final float dash4[] = {10.0f, 0.0f};

    final float dashes[][] = {dash1, dash2, dash3, dash4};

    /**
     * Creates new form VentanaPincipal
     */
    public VentanaPrincipal() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotonesFormas = new javax.swing.ButtonGroup();
        barraHerramientas = new javax.swing.JToolBar();
        botonNuevo = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        botonPunto = new javax.swing.JToggleButton();
        botonLinea = new javax.swing.JToggleButton();
        botonRectangulo = new javax.swing.JToggleButton();
        botonElipse = new javax.swing.JToggleButton();
        botonPoligono = new javax.swing.JToggleButton();
        botonCurvaQ = new javax.swing.JToggleButton();
        botonEditar = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        Color colors[] = { Color.BLACK,Color.WHITE, Color.GRAY, Color.GREEN,
            Color.RED, Color.MAGENTA, Color.BLUE,Color.ORANGE,
            Color.YELLOW
        }
        ;
        menuColores = new javax.swing.JComboBox(colors);
        jSeparator3 = new javax.swing.JToolBar.Separator();
        spinnerGrosor = new javax.swing.JSpinner();
        ImageIcon stk1 = new javax.swing.ImageIcon(getClass().getResource("/iconos/stk1.png"),"stk1");
        ImageIcon stk2 = new javax.swing.ImageIcon(getClass().getResource("/iconos/stk2.png"),"stk2");
        ImageIcon stk3 = new javax.swing.ImageIcon(getClass().getResource("/iconos/stk3.png"),"stk3");
        ImageIcon stk4 = new javax.swing.ImageIcon(getClass().getResource("/iconos/stk4.png"),"stk4");

        Icon icons[] = {stk1,stk2,stk3,stk4};
        menuStroke = new javax.swing.JComboBox(icons);
        botonRelleno = new javax.swing.JToggleButton();
        botonTransparencia = new javax.swing.JToggleButton();
        sliderTransparencia = new javax.swing.JSlider();
        botonAlisar = new javax.swing.JToggleButton();
        panelInferior = new javax.swing.JPanel();
        barraEstado = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        panelBrillo = new javax.swing.JPanel();
        sliderBrillo = new javax.swing.JSlider();
        panelFiltros = new javax.swing.JPanel();
        comboBoxFiltros = new javax.swing.JComboBox<>();
        panelContraste = new javax.swing.JPanel();
        botonContraste = new javax.swing.JButton();
        botonIluminar = new javax.swing.JButton();
        botonOscurecer = new javax.swing.JButton();
        panelSinusoidal = new javax.swing.JPanel();
        botonSeno = new javax.swing.JButton();
        botonSepia = new javax.swing.JButton();
        panelRotacion = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        boton90 = new javax.swing.JButton();
        boton180 = new javax.swing.JButton();
        boton270 = new javax.swing.JButton();
        panelEscala = new javax.swing.JPanel();
        botonAumentar = new javax.swing.JButton();
        botonReducir = new javax.swing.JButton();
        panelBinaryOp = new javax.swing.JPanel();
        botonSuma = new javax.swing.JButton();
        botonResta = new javax.swing.JButton();
        sliderBend = new javax.swing.JSlider();
        escritorio = new javax.swing.JDesktopPane();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        miNuevo = new javax.swing.JMenuItem();
        miAbrir = new javax.swing.JMenuItem();
        miGuardar = new javax.swing.JMenuItem();
        menuEditar = new javax.swing.JMenu();
        miVerBarraEstado = new javax.swing.JCheckBoxMenuItem();
        miVerToolsBar = new javax.swing.JCheckBoxMenuItem();
        menuImagen = new javax.swing.JMenu();
        cambiarTamanioImagen = new javax.swing.JMenuItem();
        duplicarImagen = new javax.swing.JMenuItem();
        menuDibujo = new javax.swing.JMenu();
        cambiarTamanioLienzo = new javax.swing.JMenuItem();
        selecionColores = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Paint Básico");

        barraHerramientas.setRollover(true);

        botonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        botonNuevo.setFocusable(false);
        botonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonNuevo);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        botonAbrir.setFocusable(false);
        botonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonAbrir);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        botonGuardar.setFocusable(false);
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonGuardar);
        barraHerramientas.add(jSeparator1);

        grupoBotonesFormas.add(botonPunto);
        botonPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        botonPunto.setSelected(true);
        botonPunto.setToolTipText("Punto");
        botonPunto.setFocusable(false);
        botonPunto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPunto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPuntoActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonPunto);

        grupoBotonesFormas.add(botonLinea);
        botonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        botonLinea.setToolTipText("Línea");
        botonLinea.setFocusable(false);
        botonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLineaActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonLinea);

        grupoBotonesFormas.add(botonRectangulo);
        botonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        botonRectangulo.setToolTipText("Rectángulo");
        botonRectangulo.setFocusable(false);
        botonRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRectanguloActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonRectangulo);

        grupoBotonesFormas.add(botonElipse);
        botonElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        botonElipse.setToolTipText("Elipse");
        botonElipse.setFocusable(false);
        botonElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonElipseActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonElipse);

        grupoBotonesFormas.add(botonPoligono);
        botonPoligono.setText("POL");
        botonPoligono.setFocusable(false);
        botonPoligono.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPoligono.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPoligono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPoligonoActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonPoligono);

        grupoBotonesFormas.add(botonCurvaQ);
        botonCurvaQ.setText("CUQ");
        botonCurvaQ.setFocusable(false);
        botonCurvaQ.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCurvaQ.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCurvaQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCurvaQActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonCurvaQ);

        grupoBotonesFormas.add(botonEditar);
        botonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        botonEditar.setFocusable(false);
        botonEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonEditar);
        barraHerramientas.add(jSeparator2);

        menuColores.setRenderer(new ColorCellRenderer());
        menuColores.setMaximumRowCount(4);
        menuColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuColoresActionPerformed(evt);
            }
        });
        barraHerramientas.add(menuColores);
        barraHerramientas.add(jSeparator3);

        spinnerGrosor.setToolTipText("Borde");
        spinnerGrosor.setPreferredSize(new java.awt.Dimension(50, 29));
        spinnerGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerGrosorStateChanged(evt);
            }
        });
        barraHerramientas.add(spinnerGrosor);

        menuStroke.setRenderer(new StrokeCellRenderer());
        menuStroke.setSelectedIndex(3);
        menuStroke.setMaximumRowCount(4);
        menuStroke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuStrokeActionPerformed(evt);
            }
        });
        barraHerramientas.add(menuStroke);

        botonRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        botonRelleno.setFocusable(false);
        botonRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRellenoActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonRelleno);

        botonTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        botonTransparencia.setFocusable(false);
        botonTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTransparenciaActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonTransparencia);

        sliderTransparencia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderTransparenciaStateChanged(evt);
            }
        });
        barraHerramientas.add(sliderTransparencia);

        botonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        botonAlisar.setFocusable(false);
        botonAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAlisarActionPerformed(evt);
            }
        });
        barraHerramientas.add(botonAlisar);

        getContentPane().add(barraHerramientas, java.awt.BorderLayout.PAGE_START);

        panelInferior.setLayout(new java.awt.BorderLayout());

        barraEstado.setText("Barra de estado");
        barraEstado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelInferior.add(barraEstado, java.awt.BorderLayout.PAGE_END);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 10, 1));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        panelBrillo.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Brillo"));

        sliderBrillo.setMaximum(255);
        sliderBrillo.setMinimum(-255);
        sliderBrillo.setValue(0);
        sliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrilloStateChanged(evt);
            }
        });
        sliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusLost(evt);
            }
        });
        panelBrillo.add(sliderBrillo);

        jPanel1.add(panelBrillo);

        panelFiltros.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Filtro"));

        comboBoxFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        comboBoxFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxFiltrosActionPerformed(evt);
            }
        });
        panelFiltros.add(comboBoxFiltros);

        jPanel1.add(panelFiltros);

        panelContraste.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Contraste"));

        botonContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        botonContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteActionPerformed(evt);
            }
        });
        panelContraste.add(botonContraste);

        botonIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        botonIluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIluminarActionPerformed(evt);
            }
        });
        panelContraste.add(botonIluminar);

        botonOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        botonOscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOscurecerActionPerformed(evt);
            }
        });
        panelContraste.add(botonOscurecer);

        jPanel1.add(panelContraste);

        panelSinusoidal.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "          "));
        panelSinusoidal.setMinimumSize(new java.awt.Dimension(66, 60));
        panelSinusoidal.setPreferredSize(new java.awt.Dimension(120, 60));
        panelSinusoidal.setLayout(new javax.swing.BoxLayout(panelSinusoidal, javax.swing.BoxLayout.LINE_AXIS));

        botonSeno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinusoidal.png"))); // NOI18N
        botonSeno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSenoActionPerformed(evt);
            }
        });
        panelSinusoidal.add(botonSeno);

        botonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosPractica11/sepia.png"))); // NOI18N
        botonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSepiaActionPerformed(evt);
            }
        });
        panelSinusoidal.add(botonSepia);

        jPanel1.add(panelSinusoidal);

        panelRotacion.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Rotación"));
        panelRotacion.setPreferredSize(new java.awt.Dimension(377, 60));

        sliderRotacion.setMajorTickSpacing(45);
        sliderRotacion.setMaximum(360);
        sliderRotacion.setPaintTicks(true);
        sliderRotacion.setValue(0);
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        panelRotacion.add(sliderRotacion);

        boton90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        boton90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton90ActionPerformed(evt);
            }
        });
        panelRotacion.add(boton90);

        boton180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        boton180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton180ActionPerformed(evt);
            }
        });
        panelRotacion.add(boton180);

        boton270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        boton270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton270ActionPerformed(evt);
            }
        });
        panelRotacion.add(boton270);

        jPanel1.add(panelRotacion);

        panelEscala.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Escala"));

        botonAumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        botonAumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAumentarActionPerformed(evt);
            }
        });
        panelEscala.add(botonAumentar);

        botonReducir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        botonReducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonReducirActionPerformed(evt);
            }
        });
        panelEscala.add(botonReducir);

        jPanel1.add(panelEscala);

        panelBinaryOp.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Binarias"));

        botonSuma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosPractica11/suma.png"))); // NOI18N
        botonSuma.setPreferredSize(new java.awt.Dimension(26, 26));
        botonSuma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSumaActionPerformed(evt);
            }
        });
        panelBinaryOp.add(botonSuma);

        botonResta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosPractica11/resta.png"))); // NOI18N
        botonResta.setPreferredSize(new java.awt.Dimension(26, 26));
        botonResta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRestaActionPerformed(evt);
            }
        });
        panelBinaryOp.add(botonResta);

        sliderBend.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBendStateChanged(evt);
            }
        });
        sliderBend.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBendFocusGained(evt);
            }
        });
        panelBinaryOp.add(sliderBend);

        jPanel1.add(panelBinaryOp);

        jScrollPane1.setViewportView(jPanel1);

        panelInferior.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelInferior, java.awt.BorderLayout.PAGE_END);

        escritorio.setPreferredSize(new java.awt.Dimension(900, 500));
        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        menuArchivo.setText("Archivo");

        miNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        miNuevo.setText("Nuevo");
        miNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(miNuevo);

        miAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miAbrir.setText("Abrir");
        miAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(miAbrir);

        miGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miGuardar.setText("Guardar");
        miGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(miGuardar);

        barraMenu.add(menuArchivo);

        menuEditar.setText("Editar");

        miVerBarraEstado.setSelected(true);
        miVerBarraEstado.setText("Barra de Estado");
        miVerBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miVerBarraEstadoActionPerformed(evt);
            }
        });
        menuEditar.add(miVerBarraEstado);

        miVerToolsBar.setSelected(true);
        miVerToolsBar.setText("Barra de Herramientas");
        miVerToolsBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miVerToolsBarActionPerformed(evt);
            }
        });
        menuEditar.add(miVerToolsBar);

        barraMenu.add(menuEditar);

        menuImagen.setText("Imagen");

        cambiarTamanioImagen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        cambiarTamanioImagen.setText("Tamaño nueva imagen");
        cambiarTamanioImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamanioImagenActionPerformed(evt);
            }
        });
        menuImagen.add(cambiarTamanioImagen);

        duplicarImagen.setText("Duplicar");
        duplicarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicarImagenActionPerformed(evt);
            }
        });
        menuImagen.add(duplicarImagen);

        barraMenu.add(menuImagen);

        menuDibujo.setText("Dibujo");

        cambiarTamanioLienzo.setText("Cambiar tamaño lienzo");
        cambiarTamanioLienzo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamanioLienzoActionPerformed(evt);
            }
        });
        menuDibujo.add(cambiarTamanioLienzo);

        selecionColores.setText("Colores");
        selecionColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecionColoresActionPerformed(evt);
            }
        });
        menuDibujo.add(selecionColores);

        barraMenu.add(menuDibujo);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNuevoActionPerformed
        this.botonNuevoActionPerformed(evt);
    }//GEN-LAST:event_miNuevoActionPerformed

    private void miAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAbrirActionPerformed
        this.botonAbrirActionPerformed(evt);
    }//GEN-LAST:event_miAbrirActionPerformed

    private void botonPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPuntoActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.avj.graficos.Forma.PUNTO);
            vi.getLienzo().setEditar(false);
        }

    }//GEN-LAST:event_botonPuntoActionPerformed

    private void botonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLineaActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.avj.graficos.Forma.LINEA);
            vi.getLienzo().setEditar(false);
        }

    }//GEN-LAST:event_botonLineaActionPerformed

    private void botonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectanguloActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.avj.graficos.Forma.RECTANGULO);
            vi.getLienzo().setEditar(false);
        }

    }//GEN-LAST:event_botonRectanguloActionPerformed

    private void botonElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonElipseActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.avj.graficos.Forma.ELIPSE);
            vi.getLienzo().setEditar(false);
        }

    }//GEN-LAST:event_botonElipseActionPerformed

    private void miVerBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miVerBarraEstadoActionPerformed
        this.barraEstado.setVisible(this.miVerBarraEstado.isSelected());
    }//GEN-LAST:event_miVerBarraEstadoActionPerformed

    private void miGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miGuardarActionPerformed
        this.botonGuardarActionPerformed(evt);
    }//GEN-LAST:event_miGuardarActionPerformed

    private void spinnerGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerGrosorStateChanged
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setStrokeWidth(Integer.parseInt(this.spinnerGrosor.getValue().toString()));
        }
        this.repaint();
    }//GEN-LAST:event_spinnerGrosorStateChanged

    private void botonRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRellenoActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setRelleno(this.botonRelleno.isSelected());
        }
        this.repaint();
    }//GEN-LAST:event_botonRellenoActionPerformed

    private void botonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setEditar(true);
        }
        this.repaint();
    }//GEN-LAST:event_botonEditarActionPerformed

    private void botonTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTransparenciaActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setTransparencia(this.botonTransparencia.isSelected());
            this.sliderTransparencia.setVisible(this.botonTransparencia.isSelected());
            this.sliderTransparencia.setValue((int) (vi.getLienzo().getTransparenciaValue() * 100));
        }
        this.repaint();
    }//GEN-LAST:event_botonTransparenciaActionPerformed

    private void botonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAlisarActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setAlisado(this.botonAlisar.isSelected());
        }
        this.repaint();
    }//GEN-LAST:event_botonAlisarActionPerformed


    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        VentanaInterna vi = new VentanaInterna(this);
        escritorio.add(vi);
        vi.setVisible(true);

    }//GEN-LAST:event_botonNuevoActionPerformed

    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();

        String extensiones[];
        extensiones = ImageIO.getReaderFormatNames();

        Set<String> extSinRep = new LinkedHashSet<>();
        for (String extension : extensiones) {
            extSinRep.add(extension.toLowerCase());
        }

        for (String extension : extSinRep) {
            dlg.addChoosableFileFilter(new FileNameExtensionFilter(extension, extension));
        }

        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            File f = dlg.getSelectedFile();
            BufferedImage img = null;
            try {
                img = ImageIO.read(f);
            } catch (IOException ex) {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            VentanaInterna vi = new VentanaInterna(this);
            vi.getLienzo().setImage(img);
            this.escritorio.add(vi);
            vi.setTitle(f.getName());
            vi.setVisible(true);
        }
    }//GEN-LAST:event_botonAbrirActionPerformed

    /**
     * @TODO Preguntar a Jesus.
     * @param evt
     */

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            JFileChooser dlg = new JFileChooser();

            String extensiones[];
            extensiones = ImageIO.getWriterFileSuffixes();

            Set<String> extSinRep = new LinkedHashSet<>();
            for (String extension : extensiones) {
                extSinRep.add(extension.toLowerCase());
            }

            for (String extension : extSinRep) {
                dlg.addChoosableFileFilter(new FileNameExtensionFilter(extension, extension));
            }

            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {

                try {
                    BufferedImage img = vi.getLienzo().getImage(true);
                    if (img != null) {
                        File f = dlg.getSelectedFile();
                        String ext = dlg.getFileFilter().getDescription();

                        ImageIO.write(img, ext, f);
                        vi.setTitle(f.getName());
                    }
                } catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                }

            }
        }
    }//GEN-LAST:event_botonGuardarActionPerformed

    private void menuColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuColoresActionPerformed
        Color c = (Color) this.menuColores.getSelectedItem();
        this.menuColores.setBackground(c);

        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(this.menuColores.getBackground());
            repaint();
        }
    }//GEN-LAST:event_menuColoresActionPerformed


    private void cambiarTamanioImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarTamanioImagenActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            resizeDialog rd = new resizeDialog(this, true);
            rd.setAncho(vi.getLienzo().getImage().getWidth());
            rd.setAltura(vi.getLienzo().getImage().getHeight());

            rd.setVisible(true);

            if (rd.getEditado()) {
                int altura = rd.getAltura();
                int ancho = rd.getAncho();

                BufferedImage image = vi.getLienzo().getImage();
                BufferedImage imgEscalada = new BufferedImage(altura, ancho, image.getType());

                Graphics2D g2d = imgEscalada.createGraphics();
                g2d.drawImage(image, 0, 0, altura, ancho, null);
                g2d.dispose();

                vi.getLienzo().setImage(imgEscalada);
                repaint();
                rd.setEditado(false);
            }
        }

    }//GEN-LAST:event_cambiarTamanioImagenActionPerformed

    private void miVerToolsBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miVerToolsBarActionPerformed
        this.barraHerramientas.setVisible(this.miVerToolsBar.isSelected());
    }//GEN-LAST:event_miVerToolsBarActionPerformed

    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            imagenAux = vi.getLienzo().getImage();
        }
    }//GEN-LAST:event_sliderBrilloFocusGained

    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        // VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        // if (vi != null) {
        //vi.getLienzo().setImage(imagenAux);
        this.imagenAux = null;
        this.sliderBrillo.setValue(0);
        repaint();
        // }
    }//GEN-LAST:event_sliderBrilloFocusLost

    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null && imagenAux != null && this.sliderBrillo.hasFocus()) {
            RescaleOp rop;
            if (this.imagenAux.getColorModel().hasAlpha()) {
                float[] scales = new float[]{1.0f, 1.0f, 1.0f, 1.0f};
                float brillo = this.sliderBrillo.getValue();
                float[] offsets = new float[]{brillo, brillo, brillo, 0.0f};
                rop = new RescaleOp(scales, offsets, null);
            } else {
                rop = new RescaleOp(1.0f, this.sliderBrillo.getValue(), null);
            }
            /**
             * @TODO ¿Más eficiente creando la variable fuera?
             */
            BufferedImage imgOut = rop.filter(imagenAux, null);
            vi.getLienzo().setImage(imgOut);
            repaint();

        }
    }//GEN-LAST:event_sliderBrilloStateChanged

    private void comboBoxFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxFiltrosActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null && vi.getLienzo().getImage() != null) {
            int index = this.comboBoxFiltros.getSelectedIndex();
            Kernel k = KernelProducer.createKernel(index);
            ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);

            vi.getLienzo().setImage(cop.filter(vi.getLienzo().getImage(), null));

            repaint();
        }
    }//GEN-LAST:event_comboBoxFiltrosActionPerformed

    /**
     * @TODO ¿Es buena idea?
     *
     */
    private LookupOp crearLookupOp(int tipo) {
        LookupTable lt = LookupTableProducer.createLookupTable(tipo);
        LookupOp lop = new LookupOp(lt, null);
        return lop;
    }

    private void botonContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {

                    // Imagen origen y destino iguales
                    crearLookupOp(LookupTableProducer.TYPE_SFUNCION).filter(imgSource, imgSource);
                    vi.repaint();

                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonContrasteActionPerformed

    private void botonIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIluminarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    crearLookupOp(LookupTableProducer.TYPE_LOGARITHM).filter(imgSource, imgSource);
                    vi.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonIluminarActionPerformed

    private void botonOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOscurecerActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    crearLookupOp(LookupTableProducer.TYPE_POWER).filter(imgSource, imgSource);
                    vi.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonOscurecerActionPerformed

    private void botonSenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSenoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    LookupTable lt = seno(180.0);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonSenoActionPerformed

    /**
     * @TODO Invesitgar el funcionamiento....
     * @param imagen
     * @param grados
     * @return
     */
    private BufferedImage rotarImagen(BufferedImage imagen, int grados) {
        double r = Math.toRadians(grados);
        double cos = Math.abs(Math.cos(r));
        double sin = Math.abs(Math.sin(r));
        double width = imagen.getWidth();
        double height = imagen.getHeight();

        Point p = new Point((int) (width * cos + height * sin), (int) (width * sin + height * cos));
        Point p2 = new Point();

        BufferedImage out = new BufferedImage(p.x, p.y, imagen.getType());
        Graphics2D g2 = out.createGraphics();
        g2.setPaint(Color.WHITE);
        g2.fillRect(0, 0, p.x, p.y);

        p2.setLocation(p);
        p.setLocation(p.x / 2, p.y / 2);

        AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
        p.setLocation((p2.x - width) / 2, (p2.y - height) / 2);
        at.translate(p.x, p.y);

        AffineTransformOp atop;
        atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);

        return atop.filter(imagen, null);
    }


    private void boton180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton180ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            vi.getLienzo().setImage(rotarImagen(imgSource, 180));
            repaint();
        }
    }//GEN-LAST:event_boton180ActionPerformed

    private void boton90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton90ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            vi.getLienzo().setImage(rotarImagen(imgSource, 90));

            repaint();
        }
    }//GEN-LAST:event_boton90ActionPerformed

    private void boton270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton270ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            vi.getLienzo().setImage(rotarImagen(imgSource, 270));

            repaint();
        }
    }//GEN-LAST:event_boton270ActionPerformed

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            imagenAux = vi.getLienzo().getImage();
        }
    }//GEN-LAST:event_sliderRotacionFocusGained

    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        // VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        //  if (vi != null) {
        // vi.getLienzo().setImage(imagenAux);
        this.imagenAux = null;
        this.sliderBrillo.setValue(0);
        repaint();
        // }
    }//GEN-LAST:event_sliderRotacionFocusLost


    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null && imagenAux != null && this.sliderRotacion.hasFocus()) {
            vi.getLienzo().setImage(rotarImagen(imagenAux, this.sliderRotacion.getValue()));
            repaint();
        }
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void botonAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAumentarActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
            AffineTransformOp atop;
            atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
            vi.getLienzo().setImage(atop.filter(vi.getLienzo().getImage(), null));
            repaint();
        }
    }//GEN-LAST:event_botonAumentarActionPerformed

    private void botonReducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonReducirActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
            AffineTransformOp atop;
            atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
            vi.getLienzo().setImage(atop.filter(vi.getLienzo().getImage(), null));
            repaint();
        }
    }//GEN-LAST:event_botonReducirActionPerformed

    private void botonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSepiaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    SepiaOp so = new SepiaOp();
                    so.filter(imgSource, imgSource);
                    vi.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonSepiaActionPerformed

    private void botonSumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSumaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(false);
            if (viNext != null) {
                BufferedImage imgRight = vi.getLienzo().getImage();
                BufferedImage imgLeft = viNext.getLienzo().getImage();
                if (imgRight != null && imgLeft != null) {
                    try {
                        BlendOp op = new BlendOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        vi = new VentanaInterna(this);
                        vi.getLienzo().setImage(imgdest);
                        this.escritorio.add(vi);
                        vi.setVisible(true);
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: " + e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_botonSumaActionPerformed

    private void botonRestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRestaActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(false);
            if (viNext != null) {
                BufferedImage imgRight = vi.getLienzo().getImage();
                BufferedImage imgLeft = viNext.getLienzo().getImage();
                if (imgRight != null && imgLeft != null) {
                    try {
                        SubtractionOp op = new SubtractionOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        vi = new VentanaInterna(this);
                        vi.getLienzo().setImage(imgdest);
                        this.escritorio.add(vi);
                        vi.setVisible(true);
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: " + e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_botonRestaActionPerformed

    private void sliderBendStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBendStateChanged
        //VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vb != null) {
            float alfa = (float) this.sliderBend.getValue() / 100.0f;
            vb.mezclar(alfa);
            vb.setTitle("Mezclando...");
            repaint();
        }

    }//GEN-LAST:event_sliderBendStateChanged

    private void sliderBendFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBendFocusGained
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());

        //Para evitar que se cree una nuva ventana si aun no se ha terminado de mezclar.
        if (vb == null || vb.isMezcladoFinalizado()) {
            if (vi != null) {
                VentanaInterna viNext = (VentanaInterna) escritorio.selectFrame(false);
                if (viNext != null) {
                    imagenBendAux1 = vi.getLienzo().getImage();
                    imagenBendAux2 = viNext.getLienzo().getImage();
                    if (imagenBendAux1 != null && imagenBendAux2 != null) {
                        try {
                            vb = new VentanaBlending(this);
                            vb.setImages(imagenBendAux1, imagenBendAux2);
                            vb.mezclar(0.5f);
                            vb.setName("ventanaMezcla");

                            this.escritorio.add(vb);
                            vb.setVisible(true);
                        } catch (IllegalArgumentException e) {
                            System.err.println("Error: " + e.getLocalizedMessage());
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_sliderBendFocusGained

    private void botonPoligonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPoligonoActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.avj.graficos.Forma.POLIGONO);
            vi.getLienzo().setEditar(false);
        }
    }//GEN-LAST:event_botonPoligonoActionPerformed

    private void botonCurvaQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCurvaQActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.avj.graficos.Forma.CURVAQ);
            vi.getLienzo().setEditar(false);
        }
    }//GEN-LAST:event_botonCurvaQActionPerformed

    private void sliderTransparenciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTransparenciaStateChanged
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            double rot = this.sliderTransparencia.getValue();
            vi.getLienzo().setTrasnsparenciaValue((float) (rot / 100));
            repaint();
        }
    }//GEN-LAST:event_sliderTransparenciaStateChanged

    private void cambiarTamanioLienzoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarTamanioLienzoActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            resizeDialog rd = new resizeDialog(this, true);
            rd.setAncho(vi.getLienzo().getImage().getWidth());
            rd.setAltura(vi.getLienzo().getImage().getHeight());

            rd.setVisible(true);

            if (rd.getEditado()) {
                int altura = rd.getAltura();
                int ancho = rd.getAncho();

                BufferedImage image = vi.getLienzo().getImage();
                BufferedImage imgEscalada = new BufferedImage(altura, ancho, image.getType());

                Graphics2D g2d = imgEscalada.createGraphics();
                g2d.drawImage(image, 0, 0, altura, ancho, null);
                g2d.dispose();

                vi.getLienzo().setImage(imgEscalada);
                repaint();
                rd.setEditado(false);
            }
        }
    }//GEN-LAST:event_cambiarTamanioLienzoActionPerformed

    private void selecionColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecionColoresActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            SelectorColoresDialog sc = new SelectorColoresDialog(this, true);

            sc.setColor(vi.getLienzo().getColor());
            sc.setVisible(true);

            if (sc.isSeleccionado()) {
                vi.getLienzo().setColor(sc.getColor());
                this.menuColores.setBackground(sc.getColor());
            }

            repaint();
        }
    }//GEN-LAST:event_selecionColoresActionPerformed

    protected void setStrokeDash(float[] dash) {
        if (Arrays.equals(dash, dash1)) {
            this.menuStroke.setSelectedIndex(0);
        } else if (Arrays.equals(dash, dash2)) {
            this.menuStroke.setSelectedIndex(1);
        } else if (Arrays.equals(dash, dash3)) {
            this.menuStroke.setSelectedIndex(2);
        } else if (Arrays.equals(dash, dash4)) {
            this.menuStroke.setSelectedIndex(3);
        }
    }


    private void menuStrokeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuStrokeActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {

            String tipo = this.menuStroke.getSelectedItem().toString();

            switch (tipo) {
                case "stk1":
                    vi.getLienzo().setStrokeDash(dashes[0]);
                    break;
                case "stk2":
                    vi.getLienzo().setStrokeDash(dashes[1]);
                    break;
                case "stk3":
                    vi.getLienzo().setStrokeDash(dashes[2]);
                    break;
                case "stk4":
                    vi.getLienzo().setStrokeDash(dashes[3]);
                    break;

            }
            repaint();
        }
    }//GEN-LAST:event_menuStrokeActionPerformed

    private void duplicarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicarImagenActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            VentanaInterna vn = new VentanaInterna(this);
            vn.getLienzo().setImage(vi.getLienzo().getImage(true));
            this.escritorio.add(vn);
            vn.setTitle(vi.getTitle() + "(Copia)");
            vn.setVisible(true);
        }
    }//GEN-LAST:event_duplicarImagenActionPerformed

    /**
     * @param w
     * @return
     * @TODO ¿Deberia estar aqui ? ARREGLAR
     */
    public LookupTable seno(double w) {
        w = Math.toRadians(w);
        double K = 255.0 / Math.sin(Math.toRadians(90.0));
        byte[] lt = new byte[256];

        for (int l = 0; l <= 255; ++l) {
            lt[l] = (byte) (K * Math.abs(Math.sin(Math.toRadians((double) l * w))));
        }
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JLabel barraEstado;
    private javax.swing.JToolBar barraHerramientas;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton boton180;
    private javax.swing.JButton boton270;
    private javax.swing.JButton boton90;
    private javax.swing.JButton botonAbrir;
    protected javax.swing.JToggleButton botonAlisar;
    private javax.swing.JButton botonAumentar;
    private javax.swing.JButton botonContraste;
    public javax.swing.JToggleButton botonCurvaQ;
    protected javax.swing.JToggleButton botonEditar;
    protected javax.swing.JToggleButton botonElipse;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonIluminar;
    protected javax.swing.JToggleButton botonLinea;
    protected javax.swing.JButton botonNuevo;
    private javax.swing.JButton botonOscurecer;
    protected javax.swing.JToggleButton botonPoligono;
    protected javax.swing.JToggleButton botonPunto;
    protected javax.swing.JToggleButton botonRectangulo;
    private javax.swing.JButton botonReducir;
    protected javax.swing.JToggleButton botonRelleno;
    private javax.swing.JButton botonResta;
    private javax.swing.JButton botonSeno;
    private javax.swing.JButton botonSepia;
    private javax.swing.JButton botonSuma;
    protected javax.swing.JToggleButton botonTransparencia;
    private javax.swing.JMenuItem cambiarTamanioImagen;
    private javax.swing.JMenuItem cambiarTamanioLienzo;
    private javax.swing.JComboBox<String> comboBoxFiltros;
    private javax.swing.JMenuItem duplicarImagen;
    protected javax.swing.JDesktopPane escritorio;
    private javax.swing.ButtonGroup grupoBotonesFormas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JMenu menuArchivo;
    protected javax.swing.JComboBox<String> menuColores;
    private javax.swing.JMenu menuDibujo;
    private javax.swing.JMenu menuEditar;
    private javax.swing.JMenu menuImagen;
    public javax.swing.JComboBox<String> menuStroke;
    private javax.swing.JMenuItem miAbrir;
    private javax.swing.JMenuItem miGuardar;
    private javax.swing.JMenuItem miNuevo;
    private javax.swing.JCheckBoxMenuItem miVerBarraEstado;
    private javax.swing.JCheckBoxMenuItem miVerToolsBar;
    private javax.swing.JPanel panelBinaryOp;
    private javax.swing.JPanel panelBrillo;
    private javax.swing.JPanel panelContraste;
    private javax.swing.JPanel panelEscala;
    private javax.swing.JPanel panelFiltros;
    private javax.swing.JPanel panelInferior;
    private javax.swing.JPanel panelRotacion;
    private javax.swing.JPanel panelSinusoidal;
    private javax.swing.JMenuItem selecionColores;
    public javax.swing.JSlider sliderBend;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderRotacion;
    public javax.swing.JSlider sliderTransparencia;
    protected javax.swing.JSpinner spinnerGrosor;
    // End of variables declaration//GEN-END:variables
}
